generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  title       String
  slug        String    @unique
  content     String
  description String?
  author      String
  image       String?
  view        Int       @default(0)
  categoryId  String?
  userEmail   String?
  comments    Comment[]
  category    Category? @relation(fields: [categoryId], references: [id])
  user        User?     @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@index([categoryId])
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  password      String?
  updatedAt     DateTime  @updatedAt
  name          String?
  accounts      Account[]
  comments      Comment[]
  posts         Post[]
  sessions      Session[]
}

model Category {
  id    String @id @default(cuid())
  name  String @map("category")
  slug  String @unique
  posts Post[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String
  userEmail String
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
  user      User     @relation(fields: [userEmail], references: [email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
